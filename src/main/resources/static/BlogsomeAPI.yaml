openapi: 3.0.0
info:
  title: Blogsome
  description: OpenApi spec for Blogsome
  contact:
    name: Tshegofatso Manthata
    email: tshegofatsomanthata@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
paths:
  /user/{userId}:
    get:
      summary: Get User By Id
      description: search for a specific user based on their Id.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: id of the user
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Get user By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
  /blog/{blogId}:
    get:
      summary: Get Blog By Id
      description: search for a specific Blog based on their Id.
      operationId: getBlogById
      parameters:
        - name: blogId
          in: path
          description: id of the user
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Get user By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blogs'
  /blog:
    post:
      description: The blog endpoint allows the user to add a blog post.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blogs'
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Resource not found"

  /like/blog/{blogId}:
    put:
      description: The update comment endpoint allows users to update an existing comment on a blog post.
      operationId: updateBlogLike
      parameters:
        - name: blogId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Get Blog By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/blogs'
  /like/comment/{commentId}:
    put:
      description: The update comment endpoint allows users to update an existing comment on a blog post.
      operationId: updateCommentLike
      parameters:
        - name: commentId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Get Blog By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'
  /like/reply/{replyId}:
    put:
      description: The update comment endpoint allows users to update an existing comment on a blog post.
      operationId: updateReplyLike
      parameters:
        - name: replyId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Get Blog By Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply'

  /comment/{blogId}:
    get:
      description: The view comment endpoint allows the users groups to view the feedback on their comment.
      operationId: viewComment
      parameters:
        - name: blogId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentlist'

    post:
      description: The comment endpoint allows the user to add a comment.
      operationId: postComment
      parameters:
        - name: blogId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments'
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Resource not found"
  /reply/{commentId}:
    get:
      description: The view comment endpoint allows the users groups to view the feedback on their comment.
      operationId: viewReply
      parameters:
        - name: commentId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentlist'

    post:
      description: The comment endpoint allows the user to add a comment.
      operationId: postReply
      parameters:
        - name: commentId
          in: path
          description: id of the blog
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reply'
      responses:
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Resource not found"
components:
  schemas:
    users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        blogs:
          type: array
          items:
            $ref: '#/components/schemas/blogs'
        followers:
          type: integer
          format: int64
        following:
          type: integer
          format: int64
      description: blogsome Users
    blogs:
      type: object
      properties:
        id:
          type: integer
          format: int64
        tags:
          type: array
          items:
            type: string
        comments:
          $ref: '#/components/schemas/commentlist'
        likes:
          type: integer
          format: int64
        post:
          type: string

      description: posted blogs
    comments:
      type: object
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
        likes:
          type: integer
          format: int64
        reply:
            $ref: '#/components/schemas/replylist'

    reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reply:
          type: string
        likes:
          type: integer
          format: int64
    bloglist:
      type: array
      items:
        $ref: '#/components/schemas/blogs'
    commentlist:
      type: array
      items:
        $ref: '#/components/schemas/comments'
    replylist:
      type: array
      items:
        $ref: '#/components/schemas/reply'
